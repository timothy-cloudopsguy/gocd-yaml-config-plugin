package cd.go.plugin.config.yaml;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

public class HashUtils {
  
    public static List<String> split(String s, int chunkSize) {
        List<String> chunks = new ArrayList<>();
        for (int i = 0; i < s.length(); i += chunkSize) {
            chunks.add(s.substring(i, Math.min(s.length(), i + chunkSize)));
        }
        return chunks;
    }

    public static String randomizePipelineName(String envName, String pipelineName) {
        // Grab the sha512 hash of this string
        String encrypted = encrypt(envName + pipelineName);

        // Chunk out the string into 3 chunks (48, 48, and 32)
        List<String> chunked = split(encrypted, 48);
        String s1 = "";
        for (String t: chunked) {
            // Grab the last 2 characters in each chunk and add them to the s1 string
            s1 = s1 + (t.length() > 2 ? t.substring(t.length() - 2) : t);
        }
        // Return the original string with the hash added prefixed by an underscore, ensuring the string is no longer than 256 characters
        String f = pipelineName + "_" + s1;
        if (f.length() > 256) {
            f = pipelineName.substring(0, 249) + "_" + s1;
        }
        return f;
    }

    public static String encrypt(String input)
    {
        try {
            // getInstance() method is called with algorithm SHA-512
            MessageDigest md = MessageDigest.getInstance("SHA-512");
  
            // digest() method is called
            // to calculate message digest of the input string
            // returned as array of byte
            byte[] messageDigest = md.digest(input.getBytes());
  
            // Convert byte array into signum representation
            BigInteger no = new BigInteger(1, messageDigest);
  
            // Convert message digest into hex value
            String hashtext = no.toString(16);
  
            // Add preceding 0s to make it 32 bit
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
  
            // return the HashText
            return hashtext;
        }
  
        // For specifying wrong message digest algorithms
        catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    // Driver code
    public static void main(String args[]) throws NoSuchAlgorithmException
    {
  
        System.out.println("HashCode Generated by SHA-512 for: ");
  
        String envName = "build-prod-com";

        String s1 = "cdk_cfn_custom";
        System.out.println("\n" + s1 + " : " + randomizePipelineName(envName, s1));
  
        String s2 = "packer_amzn2_ecs_linux_base_gov";
        System.out.println("\n" + s2 + " : " + randomizePipelineName(envName, s2));

        String s3 = "i_am_a_string_that_is_over_256_characters_in_length_i_am_a_string_that_is_over_256_characters_in_length_i_am_a_string_that_is_over_256_characters_in_length_i_am_a_string_that_is_over_256_characters_in_length_i_am_a_string_that_is_over_256_characters_in_length";
        System.out.println("\n" + s3 + " : " + randomizePipelineName(envName, s3));

    }
}